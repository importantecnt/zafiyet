# OWASP Top 10 2021 genişletilmiş zafiyet verileri
vulnerabilities_extended = {
    "A01:2021-Broken Access Control": {
        "name": "Broken Access Control",
        "description": "Erişim kontrolü zafiyeti tespit edildi.",
        "risk_level": "Kritik",
        "impact": [
            "Yetkisiz veri erişimi",
            "Sistem manipülasyonu",
            "Veri sızıntısı",
            "Kullanıcı hesaplarının ele geçirilmesi"
        ],
        "solutions": [
            "Role-based access control (RBAC) implementasyonu",
            "Principle of least privilege uygulanması",
            "Session yönetiminin güçlendirilmesi",
            "JWT token güvenliğinin sağlanması",
            "API güvenlik kontrollerinin implementasyonu"
        ],
        "detection_patterns": [
            r"auth.*bypass",
            r"admin.*direct",
            r"role.*check.*missing",
            r"permission.*validation"
        ]
    },
    "A02:2021-Cryptographic Failures": {
        "name": "Cryptographic Failures",
        "description": "Kriptografik güvenlik zafiyeti tespit edildi.",
        "risk_level": "Kritik",
        "impact": [
            "Veri sızıntısı",
            "Kimlik hırsızlığı",
            "Finansal kayıp",
            "Hassas veri ifşası"
        ],
        "solutions": [
            "Güçlü şifreleme algoritmalarının kullanılması",
            "Güvenli key yönetimi",
            "TLS 1.3 implementasyonu",
            "Güvenli hash fonksiyonlarının kullanımı",
            "Şifreleme anahtarlarının düzenli rotasyonu"
        ],
        "detection_patterns": [
            r"md5\(",
            r"sha1\(",
            r"weak.*encryption",
            r"plain.*text.*password"
        ]
    },
    "A03:2021-Injection": {
        "name": "Injection",
        "description": "Kod enjeksiyon zafiyeti tespit edildi.",
        "risk_level": "Kritik",
        "impact": [
            "Veri tabanı manipülasyonu",
            "Sistem komutlarının çalıştırılması",
            "Kullanıcı verilerinin çalınması",
            "Sistemin ele geçirilmesi"
        ],
        "solutions": [
            "Prepared statements kullanımı",
            "Input validasyonu",
            "Escape karakterlerinin kullanımı",
            "ORM kullanımı",
            "WAF implementasyonu"
        ],
        "detection_patterns": [
            r"exec\(",
            r"eval\(",
            r"system\(",
            r"SELECT.*WHERE.*\$"
        ]
    },
    "A04:2021-Insecure Direct Object References (IDOR)": {
        "name": "Insecure Direct Object References (IDOR)",
        "description": "Kullanıcıların, yetkileri dışında nesnelere erişim sağlamasına olanak tanıyan bir güvenlik açığıdır.",
        "risk_level": "Yüksek",
        "impact": [
            "Yetkisiz veri erişimi",
            "Veri sızıntısı"
        ],
        "solutions": [
            "Erişim kontrolleri uygulayın",
            "Kullanıcı yetkilerini doğrulayın"
        ],
        "detection_patterns": [
            r"direct.*object.*reference",
            r"unauthorized.*access",
            r"missing.*authorization"
        ]
    },
    "A05:2021-Security Misconfiguration": {
        "name": "Security Misconfiguration",
        "description": "Uygulama veya sunucu yapılandırmalarının yanlış yapılması sonucu ortaya çıkan bir güvenlik açığıdır.",
        "risk_level": "Yüksek",
        "impact": [
            "Hizmetin kötüye kullanılması",
            "Veri sızıntısı"
        ],
        "solutions": [
            "Güvenli yapılandırma standartları uygulayın",
            "Düzenli güvenlik denetimleri yapın"
        ],
        "detection_patterns": [
            r"misconfiguration",
            r"default.*credentials",
            r"unnecessary.*services"
        ]
    },
    "A06:2021-Sensitive Data Exposure": {
        "name": "Sensitive Data Exposure",
        "description": "Hassas verilerin yeterince korunmaması sonucu ortaya çıkan bir güvenlik açığıdır.",
        "risk_level": "Kritik",
        "impact": [
            "Kişisel bilgilerin ifşası",
            "Kimlik hırsızlığı"
        ],
        "solutions": [
            "Verileri şifreleyin",
            "Güvenli veri saklama yöntemleri kullanın"
        ],
        "detection_patterns": [
            r"unprotected.*data",
            r"plaintext.*sensitive.*information",
            r"missing.*encryption"
        ]
    },
    "A07:2021-Missing Function Level Access Control": {
        "name": "Missing Function Level Access Control",
        "description": "Fonksiyon seviyesinde erişim kontrolü eksikliği.",
        "risk_level": "Yüksek",
        "impact": [
            "Yetkisiz erişim",
            "Veri manipülasyonu"
        ],
        "solutions": [
            "Her fonksiyon için erişim kontrolü uygulayın",
            "Kullanıcı rolleri ve izinlerini yönetin"
        ],
        "detection_patterns": [
            r"missing.*function.*level.*access.*control",
            r"unauthorized.*function.*access"
        ]
    },
    "A08:2021-Insufficient Logging and Monitoring": {
        "name": "Insufficient Logging and Monitoring",
        "description": "Uygulama veya sistemde yeterli günlük kaydı ve izleme yapılmaması sonucu ortaya çıkan bir güvenlik açığıdır.",
        "risk_level": "Yüksek",
        "impact": [
            "Saldırıların tespit edilememesi",
            "Zamanında müdahale edilememesi"
        ],
        "solutions": [
            "Günlük kaydı ve izleme sistemleri kurun",
            "Olay müdahale planları oluşturun"
        ],
        "detection_patterns": [
            r"insufficient.*logging",
            r"missing.*monitoring"
        ]
    },
    "A09:2021-Using Components with Known Vulnerabilities": {
        "name": "Using Components with Known Vulnerabilities",
        "description": "Bilinen zafiyetlere sahip bileşenlerin kullanılması.",
        "risk_level": "Yüksek",
        "impact": [
            "Sistem güvenliğinin ihlali",
            "Veri sızıntısı"
        ],
        "solutions": [
            "Bileşenlerin güncel sürümlerini kullanın",
            "Güvenlik güncellemelerini takip edin"
        ],
        "detection_patterns": [
            r"known.*vulnerabilities",
            r"outdated.*components"
        ]
    },
    "A10:2021-Insufficient Security Controls": {
        "name": "Insufficient Security Controls",
        "description": "Yetersiz güvenlik kontrolleri nedeniyle ortaya çıkan zafiyetler.",
        "risk_level": "Yüksek",
        "impact": [
            "Sistem güvenliğinin ihlali",
            "Veri kaybı"
        ],
        "solutions": [
            "Güvenlik kontrollerini güçlendirin",
            "Düzenli güvenlik testleri yapın"
        ],
        "detection_patterns": [
            r"insufficient.*security.*controls",
            r"weak.*security.*measures"
        ]
    }
}

# Genişletilmiş eğitim örnekleri (her kategori için 10+ örnek)
training_examples = [
    # A01:2021-Broken Access Control örnekleri
    {
        "text": "Kullanıcı kimlik doğrulaması atlatıldı ve admin paneline erişildi",
        "vulnerability": "A01:2021-Broken Access Control",
        "code_sample": """
        @app.route('/admin')
        def admin_panel():
            if session.get('logged_in'):
                return render_template('admin.html')  # Missing role check
        """
    },
    {
        "text": "URL manipülasyonu ile başka kullanıcının verileri görüntülendi",
        "vulnerability": "A01:2021-Broken Access Control",
        "code_sample": """
        @app.route('/user/<id>/profile')
        def view_profile(id):
            user = User.query.get(id)  # Missing ownership check
            return render_template('profile.html', user=user)
        """
    },
    {
        "text": "API endpoint'inde yetki kontrolü eksik",
        "vulnerability": "A01:2021-Broken Access Control",
        "code_sample": """
        @app.route('/api/data')
        def get_data():
            return jsonify(sensitive_data)  # No authentication check
        """
    },
    {
        "text": "Kullanıcı rolü kontrolü yapılmadan işlem gerçekleştiriliyor",
        "vulnerability": "A01:2021-Broken Access Control",
        "code_sample": """
        def delete_user(user_id):
            db.execute("DELETE FROM users WHERE id = ?", [user_id])  # No role check
        """
    },
    {
        "text": "JWT token doğrulaması eksik",
        "vulnerability": "A01:2021-Broken Access Control",
        "code_sample": """
        def process_request(token):
            payload = jwt.decode(token, verify=False)  # Missing token verification
            return get_user_data(payload['user_id'])
        """
    },
    {
        "text": "Direkt nesne referansı kontrolü eksik",
        "vulnerability": "A01:2021-Broken Access Control",
        "code_sample": """
        @app.route('/download/<file_id>')
        def download_file(file_id):
            return send_file(f'files/{file_id}')  # Missing access control
        """
    },
    {
        "text": "Session fixation koruması eksik",
        "vulnerability": "A01:2021-Broken Access Control",
        "code_sample": """
        def login_user():
            if check_credentials():
                session['authenticated'] = True  # No session regeneration
        """
    },
    {
        "text": "CORS yapılandırması güvensiz",
        "vulnerability": "A01:2021-Broken Access Control",
        "code_sample": """
        @app.after_request
        def after_request(response):
            response.headers['Access-Control-Allow-Origin'] = '*'  # Unsafe CORS
            return response
        """
    },
    {
        "text": "Yetki yükseltme kontrolü eksik",
        "vulnerability": "A01:2021-Broken Access Control",
        "code_sample": """
        def promote_to_admin(user_id):
            user = User.query.get(user_id)
            user.role = 'admin'  # Missing privilege escalation check
            db.session.commit()
        """
    },
    {
        "text": "API rate limiting eksik",
        "vulnerability": "A01:2021-Broken Access Control",
        "code_sample": """
        @app.route('/api/sensitive')
        def get_sensitive_data():
            return jsonify(get_data())  # No rate limiting
        """
    },
    
    # A02:2021-Cryptographic Failures örnekleri
    {
        "text": "Şifreler plain text olarak saklanıyor",
        "vulnerability": "A02:2021-Cryptographic Failures",
        "code_sample": """
        def save_password(username, password):
            db.execute("INSERT INTO users (username, password) VALUES (?, ?)",
                      [username, password])  # Plain text password
        """
    },
    {
        "text": "Zayıf şifreleme algoritması kullanılıyor",
        "vulnerability": "A02:2021-Cryptographic Failures",
        "code_sample": """
        def encrypt_data(data):
            return base64.b64encode(data.encode()).decode()  # Weak encoding
        """
    },
    {
        "text": "MD5 hash kullanımı",
        "vulnerability": "A02:2021-Cryptographic Failures",
        "code_sample": """
        def hash_password(password):
            return hashlib.md5(password.encode()).hexdigest()  # Weak hashing
        """
    },
    {
        "text": "Sabit IV kullanımı",
        "vulnerability": "A02:2021-Cryptographic Failures",
        "code_sample": """
        iv = b'1234567890123456'  # Static IV
        def encrypt(data):
            cipher = AES.new(key, AES.MODE_CBC, iv)
            return cipher.encrypt(pad(data))
        """
    },
    {
        "text": "Zayıf SSL yapılandırması",
        "vulnerability": "A02:2021-Cryptographic Failures",
        "code_sample": """
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False  # Weak SSL configuration
        ssl_context.verify_mode = ssl.CERT_NONE
        """
    },
    {
        "text": "Rastgele sayı üreteci güvensiz",
        "vulnerability": "A02:2021-Cryptographic Failures",
        "code_sample": """
        def generate_key():
            return random.randint(1, 1000000)  # Weak random number generation
        """
    },
    {
        "text": "Şifreleme anahtarı kodda sabit",
        "vulnerability": "A02:2021-Cryptographic Failures",
        "code_sample": """
        ENCRYPTION_KEY = "mysecretkey123"  # Hardcoded encryption key
        def encrypt_data(data):
            return encrypt(data, ENCRYPTION_KEY)
        """
    },
    {
        "text": "Güvensiz şifre sıfırlama",
        "vulnerability": "A02:2021-Cryptographic Failures",
        "code_sample": """
        def reset_password():
            token = str(time.time())  # Predictable token
            send_reset_email(token)
        """
    },
    {
        "text": "Zayıf parola politikası",
        "vulnerability": "A02:2021-Cryptographic Failures",
        "code_sample": """
        def validate_password(password):
            return len(password) >= 6  # Weak password policy
        """
    },
    {
        "text": "Güvensiz dosya şifreleme",
        "vulnerability": "A02:2021-Cryptographic Failures",
        "code_sample": """
        def encrypt_file(file_data):
            return xor_encrypt(file_data, 'key123')  # Weak encryption
        """
    },
    
    # A03:2021-Injection örnekleri
    {
        "text": "SQL injection zafiyeti",
        "vulnerability": "A03:2021-Injection",
        "code_sample": """
        def get_user(username, password):
            query = f"SELECT * FROM users WHERE username='{username}' AND password='{password}'"
            return db.execute(query)  # SQL Injection vulnerability
        """
    },
    {
        "text": "Command injection zafiyeti",
        "vulnerability": "A03:2021-Injection",
        "code_sample": """
        def process_file(filename):
            os.system(f"process {filename}")  # Command injection vulnerability
        """
    },
    {
        "text": "XSS zafiyeti",
        "vulnerability": "A03:2021-Injection",
        "code_sample": """
        @app.route('/display')
        def display():
            return f"<p>{request.args.get('message')}</p>"  # XSS vulnerability
        """
    },
    {
        "text": "LDAP injection zafiyeti",
        "vulnerability": "A03:2021-Injection",
        "code_sample": """
        def ldap_search(user_input):
            query = f"(cn={user_input})"  # LDAP injection vulnerability
            return ldap.search_s(base_dn, ldap.SCOPE_SUBTREE, query)
        """
    },
    {
        "text": "NoSQL injection zafiyeti",
        "vulnerability": "A03:2021-Injection",
        "code_sample": """
        def find_user(data):
            return db.users.find_one({'$where': data})  # NoSQL injection
        """
    },
    {
        "text": "XML injection zafiyeti",
        "vulnerability": "A03:2021-Injection",
        "code_sample": """
        def process_xml(xml_data):
            return ET.fromstring(xml_data)  # XML injection vulnerability
        """
    },
    {
        "text": "Template injection zafiyeti",
        "vulnerability": "A03:2021-Injection",
        "code_sample": """
        def render_template_string(user_input):
            template = f"Hello {user_input}"  # Template injection
            return render_template_string(template)
        """
    },
    {
        "text": "Path traversal zafiyeti",
        "vulnerability": "A03:2021-Injection",
        "code_sample": """
        def read_file(filename):
            with open(filename) as f:  # Path traversal vulnerability
                return f.read()
        """
    },
    {
        "text": "Code injection zafiyeti",
        "vulnerability": "A03:2021-Injection",
        "code_sample": """
        def execute_code(user_code):
            exec(user_code)  # Code injection vulnerability
        """
    },
    {
        "text": "Format string zafiyeti",
        "vulnerability": "A03:2021-Injection",
        "code_sample": """
        def format_output(user_input):
            return f"Result: {user_input}"  # Format string vulnerability
        """
    },
    
    # A04:2021-Insecure Direct Object References örnekleri
    {
        "text": "Yetkisiz nesne referansı ile veri erişimi",
        "vulnerability": "A04:2021-Insecure Direct Object References (IDOR)",
        "code_sample": """
        @app.route('/user/<id>')
        def get_user(id):
            return User.query.get(id)  # Missing ownership check
        """
    },
    {
        "text": "URL manipülasyonu ile başka kullanıcının verileri görüntülendi",
        "vulnerability": "A04:2021-Insecure Direct Object References (IDOR)",
        "code_sample": """
        @app.route('/user/<id>/profile')
        def view_profile(id):
            user = User.query.get(id)  # Missing ownership check
            return render_template('profile.html', user=user)
        """
    },
    
    # A05:2021-Security Misconfiguration örnekleri
    {
        "text": "Güvenli olmayan yapılandırma kullanımı",
        "vulnerability": "A05:2021-Security Misconfiguration",
        "code_sample": """
        @app.route('/api/data')
        def get_data():
            return jsonify(sensitive_data)  # No authentication check
        """
    },
    {
        "text": "Varsayılan ayarların değiştirilmemesi",
        "vulnerability": "A05:2021-Security Misconfiguration",
        "code_sample": """
        @app.route('/admin')
        def admin_panel():
            return render_template('admin.html')  # Default admin access
        """
    },
    
    # A06:2021-Sensitive Data Exposure örnekleri
    {
        "text": "Hassas verilerin şifrelenmeden saklanması",
        "vulnerability": "A06:2021-Sensitive Data Exposure",
        "code_sample": """
        def save_user_data(username, password):
            db.execute("INSERT INTO users (username, password) VALUES (?, ?)",
                      [username, password])  # Plain text password
        """
    },
    {
        "text": "Hassas verilerin güvenli bir şekilde saklanmaması",
        "vulnerability": "A06:2021-Sensitive Data Exposure",
        "code_sample": """
        def get_user_data(user_id):
            return db.execute("SELECT * FROM users WHERE id = ?", [user_id])  # No encryption
        """
    },
    
    # A07:2021-Missing Function Level Access Control örnekleri
    {
        "text": "Fonksiyon seviyesinde erişim kontrolü eksik",
        "vulnerability": "A07:2021-Missing Function Level Access Control",
        "code_sample": """
        @app.route('/admin')
        def admin_panel():
            return render_template('admin.html')  # No access control
        """
    },
    {
        "text": "Yetkisiz API erişimi",
        "vulnerability": "A07:2021-Missing Function Level Access Control",
        "code_sample": """
        @app.route('/api/data')
        def get_data():
            return jsonify(sensitive_data)  # No authentication check
        """
    },
    
    # A08:2021-Insufficient Logging and Monitoring örnekleri
    {
        "text": "Yetersiz günlük kaydı",
        "vulnerability": "A08:2021-Insufficient Logging and Monitoring",
        "code_sample": """
        def process_request(request):
            log_request(request)  # No logging implemented
        """
    },
    {
        "text": "Olay müdahale planı eksik",
        "vulnerability": "A08:2021-Insufficient Logging and Monitoring",
        "code_sample": """
        def handle_error(error):
            return "An error occurred"  # No error logging
        """
    },
    
    # A09:2021-Using Components with Known Vulnerabilities örnekleri
    {
        "text": "Bilinen zafiyetlere sahip kütüphane kullanımı",
        "vulnerability": "A09:2021-Using Components with Known Vulnerabilities",
        "code_sample": """
        import vulnerable_library  # Using a library with known vulnerabilities
        """
    },
    {
        "text": "Güncel olmayan bileşen kullanımı",
        "vulnerability": "A09:2021-Using Components with Known Vulnerabilities",
        "code_sample": """
        def use_old_library():
            return old_library.function()  # Using outdated library
        """
    },
    
    # A10:2021-Insufficient Security Controls örnekleri
    {
        "text": "Yetersiz güvenlik kontrolleri",
        "vulnerability": "A10:2021-Insufficient Security Controls",
        "code_sample": """
        def process_payment(payment_info):
            return process(payment_info)  # No security checks
        """
    },
    {
        "text": "Güvenlik testlerinin eksikliği",
        "vulnerability": "A10:2021-Insufficient Security Controls",
        "code_sample": """
        def deploy_application():
            deploy()  # No security testing before deployment
        """
    }
]